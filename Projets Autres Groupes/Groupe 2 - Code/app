from marketdataloader import MarketDataLoader
from flask import Flask, request, jsonify
import dill 
import base64
import datetime as dt

class NonJsonSerializableError(Exception):
    """ Raised when the output of the user custom function is not json serializable. """
    pass

def b642func(fb64: str) -> callable:
    """ Converts a base 64 string python function back to its original form. """
    # Converting the base 64 string to bytes
    fbyt = base64.b64decode(fb64)
    # Returning the original function
    return dill.loads(fbyt)

def result_checker(result: any) -> None:
    """
    Checks for the validity of the user custom analysis function output.

    Raises
    ----------
    NonJsonSerializableError:
        Raises error if the function's output is not json serializable.
    """
    allowed_types = [dict, list, tuple, str, int, float, bool, None] # List of json serializable types
    # Checking for the output type
    if not type(result) in allowed_types:
        # Raise an error if the output type is not json serializable
        raise NonJsonSerializableError(f'{type(result)} is not json serializable, '\
                                       'please refactor the output format to an allowed type '\
                                       f'such as {allowed_types}')

app = Flask(__name__)

@app.route('/submit', methods=['POST'])
def submit():
    """
    Allows for the submission of user custom trading analysis functions applied to historical or real-time market data.

    Returns 
    ----------
    Response:
         The function's results stored inside a json file linked to the `'output'` key.
         If an exception occurs while retreiving market data, applying the custom function or trying to return the results, 
         its details will be returned inside a json file linked to the `'error'` key. 
    """
    # Collecting the posted function
    fb64 = request.json['func']
    # Converting the function back to its original form
    func = b642func(fb64)
    # Collecting the market data loading tool's options
    options = request.json['options']
    # Collecting the function's keyword arguments, if not passed by the client set it to an empty dict
    kwargs = request.json.get('kwargs', {})

    # Reading individual data loading parameters
    tickers = options['tickers'] # Tickers list
    ohlcv = options['ohlcv'] # Ohlcv endpoints list
    freq = options['freq'] # Data frequency
    start_date = dt.datetime.fromtimestamp(options['start_date']) # Starting date
    end_date = dt.datetime.fromtimestamp(options['end_date']) # Ending date

    try:
        # Initializing the tool
        dl = MarketDataLoader(tickers, ohlcv, freq, start_date, end_date)
        # Retreiving data
        data = dl.get_candlesticks()
        # Applying the user custom function
        result = func(data, **kwargs)
        # Checking for the output validity before returning the results to the user
        result_checker(result)
        # Outputing results inside a json file with the 'output' key
        return jsonify({'output': result})
        # Checking for errors while retrieving market data, applying the user function or returning results
    except Exception as e:
        # Returning the error details inside a json file with the 'error' key
        return jsonify({'error': str(e)})

if __name__ == '__main__':

    app.run(debug=True) # Running the app in debug mode